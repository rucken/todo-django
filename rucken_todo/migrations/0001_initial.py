# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-08-28 14:23
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_of_birth', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': (
                    ("read_user", "Can read user"),
                    ("read_group", "Can read group"),
                    ("read_permission", "Can read permission"),
                    ("read_contenttype", "Can read content type"),
                    ('read_homepage', 'Can read home page'),
                    ('read_themespage', 'Can read themes page'),
                    ('read_accountpage', 'Can read account page'),
                    ('read_profileframe', 'Can read profile frame'),
                    ('read_adminpage', 'Can read admin page'),
                    ('read_groupsframe', 'Can read groups frame'),
                    ('read_usersframe', 'Can read users frame'),
                    ('read_projectspage', 'Can read projects page'),
                    ('read_projectsframe', 'Can read projects frame'),
                    ('change_profile', 'Can change profile')
                ),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TodoChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_data', models.TextField(blank=True, max_length=4000, null=True)),
                ('new_data', models.TextField(blank=True, max_length=4000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'permissions': (('manage_todochange', 'Can manage changes'), ('read_todochange', 'Can read changes')),
            },
        ),
        migrations.CreateModel(
            name='TodoProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=512)),
                ('description', models.TextField(blank=True, max_length=512, null=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('manage_todoproject', 'Can manage project'), ('read_todoproject', 'Can read project')),
            },
        ),
        migrations.CreateModel(
            name='TodoStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=512)),
                ('title', models.TextField(blank=True, max_length=512, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rucken_todo.TodoProject')),
            ],
            options={
                'permissions': (('manage_todostatus', 'Can manage status'), ('read_todostatus', 'Can read status')),
            },
        ),
        migrations.CreateModel(
            name='TodoTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=512)),
                ('description', models.TextField(blank=True, max_length=512, null=True)),
                ('open_at', models.DateTimeField(blank=True, null=True)),
                ('close_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rucken_todo.TodoProject')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rucken_todo.TodoStatus')),
            ],
            options={
                'permissions': (('manage_todotask', 'Can manage task'), ('read_todotask', 'Can read task')),
            },
        ),
        migrations.AddField(
            model_name='todochange',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rucken_todo.TodoProject'),
        ),
        migrations.AddField(
            model_name='todochange',
            name='task',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rucken_todo.TodoTask'),
        ),
    ]
